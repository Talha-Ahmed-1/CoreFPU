;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit TopFile : 
  module Alu : 
    input clock : Clock
    input reset : Reset
    output io : {flip AluControl : UInt<5>, flip in1 : SInt<32>, flip in2 : SInt<32>, Branch : UInt<1>, out : SInt<32>}
    
    io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 19:16]
    node _T = eq(io.AluControl, UInt<1>("h00")) @[Alu.scala 22:29]
    when _T : @[Alu.scala 22:44]
      node _io_out_T = add(io.in1, io.in2) @[Alu.scala 22:62]
      node _io_out_T_1 = tail(_io_out_T, 1) @[Alu.scala 22:62]
      node _io_out_T_2 = asSInt(_io_out_T_1) @[Alu.scala 22:62]
      io.out <= _io_out_T_2 @[Alu.scala 22:52]
      skip @[Alu.scala 22:44]
    else : @[Alu.scala 24:49]
      node _T_1 = eq(io.AluControl, UInt<1>("h01")) @[Alu.scala 24:34]
      when _T_1 : @[Alu.scala 24:49]
        node _io_out_T_3 = bits(io.in2, 4, 0) @[Alu.scala 24:76]
        node _io_out_T_4 = dshl(io.in1, _io_out_T_3) @[Alu.scala 24:67]
        io.out <= _io_out_T_4 @[Alu.scala 24:57]
        skip @[Alu.scala 24:49]
      else : @[Alu.scala 26:49]
        node _T_2 = eq(io.AluControl, UInt<3>("h04")) @[Alu.scala 26:34]
        when _T_2 : @[Alu.scala 26:49]
          node _io_out_T_5 = xor(io.in1, io.in2) @[Alu.scala 26:67]
          node _io_out_T_6 = asSInt(_io_out_T_5) @[Alu.scala 26:67]
          io.out <= _io_out_T_6 @[Alu.scala 26:57]
          skip @[Alu.scala 26:49]
        else : @[Alu.scala 28:81]
          node _T_3 = eq(io.AluControl, UInt<3>("h05")) @[Alu.scala 28:34]
          node _T_4 = eq(io.AluControl, UInt<4>("h0d")) @[Alu.scala 28:66]
          node _T_5 = or(_T_3, _T_4) @[Alu.scala 28:49]
          when _T_5 : @[Alu.scala 28:81]
            node _io_out_T_7 = bits(io.in2, 4, 0) @[Alu.scala 28:108]
            node _io_out_T_8 = dshr(io.in1, _io_out_T_7) @[Alu.scala 28:99]
            io.out <= _io_out_T_8 @[Alu.scala 28:89]
            skip @[Alu.scala 28:81]
          else : @[Alu.scala 30:49]
            node _T_6 = eq(io.AluControl, UInt<3>("h06")) @[Alu.scala 30:34]
            when _T_6 : @[Alu.scala 30:49]
              node _io_out_T_9 = or(io.in1, io.in2) @[Alu.scala 30:67]
              node _io_out_T_10 = asSInt(_io_out_T_9) @[Alu.scala 30:67]
              io.out <= _io_out_T_10 @[Alu.scala 30:57]
              skip @[Alu.scala 30:49]
            else : @[Alu.scala 32:49]
              node _T_7 = eq(io.AluControl, UInt<3>("h07")) @[Alu.scala 32:34]
              when _T_7 : @[Alu.scala 32:49]
                node _io_out_T_11 = and(io.in1, io.in2) @[Alu.scala 32:67]
                node _io_out_T_12 = asSInt(_io_out_T_11) @[Alu.scala 32:67]
                io.out <= _io_out_T_12 @[Alu.scala 32:57]
                skip @[Alu.scala 32:49]
              else : @[Alu.scala 34:49]
                node _T_8 = eq(io.AluControl, UInt<4>("h08")) @[Alu.scala 34:34]
                when _T_8 : @[Alu.scala 34:49]
                  node _io_out_T_13 = sub(io.in1, io.in2) @[Alu.scala 34:67]
                  node _io_out_T_14 = tail(_io_out_T_13, 1) @[Alu.scala 34:67]
                  node _io_out_T_15 = asSInt(_io_out_T_14) @[Alu.scala 34:67]
                  io.out <= _io_out_T_15 @[Alu.scala 34:57]
                  skip @[Alu.scala 34:49]
                else : @[Alu.scala 36:49]
                  node _T_9 = eq(io.AluControl, UInt<5>("h01f")) @[Alu.scala 36:34]
                  when _T_9 : @[Alu.scala 36:49]
                    io.out <= io.in1 @[Alu.scala 36:57]
                    skip @[Alu.scala 36:49]
                  else : @[Alu.scala 38:49]
                    node _T_10 = eq(io.AluControl, UInt<5>("h015")) @[Alu.scala 38:34]
                    when _T_10 : @[Alu.scala 38:49]
                      node _T_11 = geq(io.in1, io.in2) @[Alu.scala 39:30]
                      when _T_11 : @[Alu.scala 39:40]
                        io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 39:48]
                        skip @[Alu.scala 39:40]
                      skip @[Alu.scala 38:49]
                    else : @[Alu.scala 42:49]
                      node _T_12 = eq(io.AluControl, UInt<5>("h017")) @[Alu.scala 42:34]
                      when _T_12 : @[Alu.scala 42:49]
                        node _T_13 = asUInt(io.in1) @[Alu.scala 43:30]
                        node _T_14 = asUInt(io.in2) @[Alu.scala 43:47]
                        node _T_15 = geq(_T_13, _T_14) @[Alu.scala 43:37]
                        when _T_15 : @[Alu.scala 43:54]
                          io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 43:62]
                          skip @[Alu.scala 43:54]
                        else : @[Alu.scala 44:28]
                          io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 44:36]
                          skip @[Alu.scala 44:28]
                        skip @[Alu.scala 42:49]
                      else : @[Alu.scala 46:81]
                        node _T_16 = eq(io.AluControl, UInt<2>("h03")) @[Alu.scala 46:34]
                        node _T_17 = eq(io.AluControl, UInt<5>("h016")) @[Alu.scala 46:66]
                        node _T_18 = or(_T_16, _T_17) @[Alu.scala 46:49]
                        when _T_18 : @[Alu.scala 46:81]
                          node _T_19 = asUInt(io.in1) @[Alu.scala 47:30]
                          node _T_20 = asUInt(io.in2) @[Alu.scala 47:46]
                          node _T_21 = lt(_T_19, _T_20) @[Alu.scala 47:37]
                          when _T_21 : @[Alu.scala 47:53]
                            io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 47:61]
                            skip @[Alu.scala 47:53]
                          else : @[Alu.scala 48:28]
                            io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 48:36]
                            skip @[Alu.scala 48:28]
                          skip @[Alu.scala 46:81]
                        else : @[Alu.scala 50:49]
                          node _T_22 = eq(io.AluControl, UInt<5>("h010")) @[Alu.scala 50:34]
                          when _T_22 : @[Alu.scala 50:49]
                            node _T_23 = eq(io.in1, io.in2) @[Alu.scala 51:30]
                            when _T_23 : @[Alu.scala 51:41]
                              io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 51:49]
                              skip @[Alu.scala 51:41]
                            else : @[Alu.scala 52:28]
                              io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 52:36]
                              skip @[Alu.scala 52:28]
                            skip @[Alu.scala 50:49]
                          else : @[Alu.scala 54:81]
                            node _T_24 = eq(io.AluControl, UInt<2>("h02")) @[Alu.scala 54:34]
                            node _T_25 = eq(io.AluControl, UInt<5>("h014")) @[Alu.scala 54:66]
                            node _T_26 = or(_T_24, _T_25) @[Alu.scala 54:49]
                            when _T_26 : @[Alu.scala 54:81]
                              node _T_27 = lt(io.in1, io.in2) @[Alu.scala 55:30]
                              when _T_27 : @[Alu.scala 55:39]
                                io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 55:47]
                                skip @[Alu.scala 55:39]
                              else : @[Alu.scala 56:28]
                                io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 56:36]
                                skip @[Alu.scala 56:28]
                              skip @[Alu.scala 54:81]
                            else : @[Alu.scala 58:49]
                              node _T_28 = eq(io.AluControl, UInt<5>("h011")) @[Alu.scala 58:34]
                              when _T_28 : @[Alu.scala 58:49]
                                node _T_29 = neq(io.in1, io.in2) @[Alu.scala 60:30]
                                when _T_29 : @[Alu.scala 60:41]
                                  io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 61:32]
                                  skip @[Alu.scala 60:41]
                                else : @[Alu.scala 64:28]
                                  io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 65:32]
                                  skip @[Alu.scala 64:28]
                                skip @[Alu.scala 58:49]
                              else : @[Alu.scala 69:20]
                                io.out is invalid @[Alu.scala 70:24]
                                skip @[Alu.scala 69:20]
    node _T_30 = eq(io.out, asSInt(UInt<2>("h01"))) @[Alu.scala 75:22]
    node _T_31 = bits(io.AluControl, 4, 3) @[Alu.scala 75:46]
    node _T_32 = eq(_T_31, UInt<2>("h02")) @[Alu.scala 75:52]
    node _T_33 = and(_T_30, _T_32) @[Alu.scala 75:30]
    when _T_33 : @[Alu.scala 75:64]
      io.Branch <= UInt<1>("h01") @[Alu.scala 76:27]
      skip @[Alu.scala 75:64]
    else : @[Alu.scala 79:20]
      io.Branch <= UInt<1>("h00") @[Alu.scala 80:27]
      skip @[Alu.scala 79:20]
    
  module AluControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip Aluop : UInt<3>, flip func7 : UInt<1>, flip func3 : UInt<3>, control : UInt<5>}
    
    node _io_control_T = eq(io.Aluop, UInt<1>("h00")) @[AluControl.scala 23:27]
    node _io_control_T_1 = eq(io.func7, UInt<1>("h00")) @[AluControl.scala 23:52]
    node _io_control_T_2 = and(_io_control_T, _io_control_T_1) @[AluControl.scala 23:40]
    node _io_control_T_3 = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
    node _io_control_T_4 = eq(io.Aluop, UInt<1>("h00")) @[AluControl.scala 24:27]
    node _io_control_T_5 = eq(io.func7, UInt<1>("h01")) @[AluControl.scala 24:52]
    node _io_control_T_6 = and(_io_control_T_4, _io_control_T_5) @[AluControl.scala 24:40]
    node _io_control_T_7 = cat(UInt<1>("h01"), io.func3) @[Cat.scala 30:58]
    node _io_control_T_8 = eq(io.Aluop, UInt<1>("h01")) @[AluControl.scala 28:27]
    node _io_control_T_9 = eq(io.func3, UInt<3>("h05")) @[AluControl.scala 28:52]
    node _io_control_T_10 = and(_io_control_T_8, _io_control_T_9) @[AluControl.scala 28:40]
    node _io_control_T_11 = eq(io.func7, UInt<1>("h00")) @[AluControl.scala 28:77]
    node _io_control_T_12 = and(_io_control_T_10, _io_control_T_11) @[AluControl.scala 28:65]
    node _io_control_T_13 = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
    node _io_control_T_14 = eq(io.Aluop, UInt<1>("h01")) @[AluControl.scala 32:27]
    node _io_control_T_15 = eq(io.func3, UInt<3>("h05")) @[AluControl.scala 32:52]
    node _io_control_T_16 = and(_io_control_T_14, _io_control_T_15) @[AluControl.scala 32:40]
    node _io_control_T_17 = eq(io.func7, UInt<1>("h01")) @[AluControl.scala 32:77]
    node _io_control_T_18 = and(_io_control_T_16, _io_control_T_17) @[AluControl.scala 32:65]
    node _io_control_T_19 = cat(UInt<1>("h01"), io.func3) @[Cat.scala 30:58]
    node _io_control_T_20 = eq(io.Aluop, UInt<1>("h01")) @[AluControl.scala 36:27]
    node _io_control_T_21 = eq(io.func3, UInt<1>("h01")) @[AluControl.scala 36:52]
    node _io_control_T_22 = and(_io_control_T_20, _io_control_T_21) @[AluControl.scala 36:40]
    node _io_control_T_23 = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
    node _io_control_T_24 = eq(io.Aluop, UInt<1>("h01")) @[AluControl.scala 40:27]
    node _io_control_T_25 = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
    node _io_control_T_26 = eq(io.Aluop, UInt<2>("h02")) @[AluControl.scala 44:27]
    node _io_control_T_27 = cat(UInt<2>("h02"), io.func3) @[Cat.scala 30:58]
    node _io_control_T_28 = eq(io.Aluop, UInt<2>("h03")) @[AluControl.scala 48:27]
    node _io_control_T_29 = mux(_io_control_T_28, UInt<5>("h01f"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _io_control_T_30 = mux(_io_control_T_26, _io_control_T_27, _io_control_T_29) @[Mux.scala 98:16]
    node _io_control_T_31 = mux(_io_control_T_24, _io_control_T_25, _io_control_T_30) @[Mux.scala 98:16]
    node _io_control_T_32 = mux(_io_control_T_22, _io_control_T_23, _io_control_T_31) @[Mux.scala 98:16]
    node _io_control_T_33 = mux(_io_control_T_18, _io_control_T_19, _io_control_T_32) @[Mux.scala 98:16]
    node _io_control_T_34 = mux(_io_control_T_12, _io_control_T_13, _io_control_T_33) @[Mux.scala 98:16]
    node _io_control_T_35 = mux(_io_control_T_6, _io_control_T_7, _io_control_T_34) @[Mux.scala 98:16]
    node _io_control_T_36 = mux(_io_control_T_2, _io_control_T_3, _io_control_T_35) @[Mux.scala 98:16]
    io.control <= _io_control_T_36 @[AluControl.scala 19:20]
    
  module TypeDecode : 
    input clock : Clock
    input reset : Reset
    output io : {flip opCode : UInt<7>, flip func5 : UInt<5>, RType : UInt<1>, Load : UInt<1>, Store : UInt<1>, Branch : UInt<1>, IType : UInt<1>, Jalr : UInt<1>, Jal : UInt<1>, Lui : UInt<1>, Fmv : UInt<1>, Fadd : UInt<1>}
    
    io.RType <= UInt<1>("h00") @[TypeDecode.scala 29:18]
    io.Load <= UInt<1>("h00") @[TypeDecode.scala 30:17]
    io.Store <= UInt<1>("h00") @[TypeDecode.scala 31:18]
    io.Branch <= UInt<1>("h00") @[TypeDecode.scala 32:19]
    io.IType <= UInt<1>("h00") @[TypeDecode.scala 33:18]
    io.Jalr <= UInt<1>("h00") @[TypeDecode.scala 34:17]
    io.Jal <= UInt<1>("h00") @[TypeDecode.scala 35:16]
    io.Lui <= UInt<1>("h00") @[TypeDecode.scala 36:16]
    io.Fmv <= UInt<1>("h00") @[TypeDecode.scala 37:16]
    io.Fadd <= UInt<1>("h00") @[TypeDecode.scala 38:17]
    node _T = and(io.func5, UInt<5>("h01f")) @[TypeDecode.scala 40:23]
    node _T_1 = eq(UInt<1>("h00"), _T) @[TypeDecode.scala 40:23]
    node _T_2 = and(io.opCode, UInt<7>("h07f")) @[TypeDecode.scala 40:57]
    node _T_3 = eq(UInt<7>("h053"), _T_2) @[TypeDecode.scala 40:57]
    node _T_4 = and(_T_1, _T_3) @[TypeDecode.scala 40:44]
    when _T_4 : @[TypeDecode.scala 40:80]
      io.Fadd <= UInt<1>("h01") @[TypeDecode.scala 41:25]
      skip @[TypeDecode.scala 40:80]
    else : @[TypeDecode.scala 43:85]
      node _T_5 = and(io.func5, UInt<5>("h01f")) @[TypeDecode.scala 43:28]
      node _T_6 = eq(UInt<5>("h01e"), _T_5) @[TypeDecode.scala 43:28]
      node _T_7 = and(io.opCode, UInt<7>("h07f")) @[TypeDecode.scala 43:62]
      node _T_8 = eq(UInt<7>("h053"), _T_7) @[TypeDecode.scala 43:62]
      node _T_9 = and(_T_6, _T_8) @[TypeDecode.scala 43:49]
      when _T_9 : @[TypeDecode.scala 43:85]
        io.Fmv <= UInt<1>("h01") @[TypeDecode.scala 44:24]
        skip @[TypeDecode.scala 43:85]
      else : @[TypeDecode.scala 46:46]
        node _T_10 = eq(io.opCode, UInt<6>("h033")) @[TypeDecode.scala 46:29]
        when _T_10 : @[TypeDecode.scala 46:46]
          io.RType <= UInt<1>("h01") @[TypeDecode.scala 47:26]
          skip @[TypeDecode.scala 46:46]
        else : @[TypeDecode.scala 50:46]
          node _T_11 = eq(io.opCode, UInt<2>("h03")) @[TypeDecode.scala 50:29]
          when _T_11 : @[TypeDecode.scala 50:46]
            io.Load <= UInt<1>("h01") @[TypeDecode.scala 51:25]
            skip @[TypeDecode.scala 50:46]
          else : @[TypeDecode.scala 54:46]
            node _T_12 = eq(io.opCode, UInt<6>("h023")) @[TypeDecode.scala 54:29]
            when _T_12 : @[TypeDecode.scala 54:46]
              io.Store <= UInt<1>("h01") @[TypeDecode.scala 55:26]
              skip @[TypeDecode.scala 54:46]
            else : @[TypeDecode.scala 58:46]
              node _T_13 = eq(io.opCode, UInt<7>("h063")) @[TypeDecode.scala 58:29]
              when _T_13 : @[TypeDecode.scala 58:46]
                io.Branch <= UInt<1>("h01") @[TypeDecode.scala 59:27]
                skip @[TypeDecode.scala 58:46]
              else : @[TypeDecode.scala 62:46]
                node _T_14 = eq(io.opCode, UInt<5>("h013")) @[TypeDecode.scala 62:29]
                when _T_14 : @[TypeDecode.scala 62:46]
                  io.IType <= UInt<1>("h01") @[TypeDecode.scala 63:26]
                  skip @[TypeDecode.scala 62:46]
                else : @[TypeDecode.scala 66:46]
                  node _T_15 = eq(io.opCode, UInt<7>("h067")) @[TypeDecode.scala 66:29]
                  when _T_15 : @[TypeDecode.scala 66:46]
                    io.Jalr <= UInt<1>("h01") @[TypeDecode.scala 67:25]
                    skip @[TypeDecode.scala 66:46]
                  else : @[TypeDecode.scala 70:46]
                    node _T_16 = eq(io.opCode, UInt<7>("h06f")) @[TypeDecode.scala 70:29]
                    when _T_16 : @[TypeDecode.scala 70:46]
                      io.Jal <= UInt<1>("h01") @[TypeDecode.scala 71:24]
                      skip @[TypeDecode.scala 70:46]
                    else : @[TypeDecode.scala 74:46]
                      node _T_17 = eq(io.opCode, UInt<6>("h037")) @[TypeDecode.scala 74:29]
                      when _T_17 : @[TypeDecode.scala 74:46]
                        io.Lui <= UInt<1>("h01") @[TypeDecode.scala 75:24]
                        skip @[TypeDecode.scala 74:46]
    
  module ControlDecode : 
    input clock : Clock
    input reset : Reset
    output io : {flip RType : UInt<1>, flip Load : UInt<1>, flip Store : UInt<1>, flip SBType : UInt<1>, flip IType : UInt<1>, flip Jalr : UInt<1>, flip Jal : UInt<1>, flip Lui : UInt<1>, flip Fmv : UInt<1>, flip Fadd : UInt<1>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemToReg : UInt<1>, AluOp : UInt<3>, Operand_aSel : UInt<2>, Operand_bSel : UInt<1>, ExtendSel : UInt<2>, NextPcSel : UInt<2>, FRegWrite : UInt<1>, FRegRead : UInt<1>}
    
    io.MemWrite <= UInt<1>("h00") @[ControlDecode.scala 39:21]
    io.Branch <= UInt<1>("h00") @[ControlDecode.scala 40:19]
    io.MemRead <= UInt<1>("h00") @[ControlDecode.scala 41:20]
    io.RegWrite <= UInt<1>("h00") @[ControlDecode.scala 42:21]
    io.MemToReg <= UInt<1>("h00") @[ControlDecode.scala 43:21]
    io.AluOp <= UInt<1>("h00") @[ControlDecode.scala 44:18]
    io.Operand_aSel <= UInt<1>("h00") @[ControlDecode.scala 45:25]
    io.Operand_bSel <= UInt<1>("h00") @[ControlDecode.scala 46:25]
    io.ExtendSel <= UInt<1>("h00") @[ControlDecode.scala 47:22]
    io.NextPcSel <= UInt<1>("h00") @[ControlDecode.scala 48:22]
    io.FRegWrite <= UInt<1>("h00") @[ControlDecode.scala 49:22]
    io.FRegRead <= UInt<1>("h00") @[ControlDecode.scala 50:21]
    node _T = eq(io.Fmv, UInt<1>("h01")) @[ControlDecode.scala 52:21]
    when _T : @[ControlDecode.scala 52:29]
      io.FRegWrite <= UInt<1>("h01") @[ControlDecode.scala 53:30]
      skip @[ControlDecode.scala 52:29]
    else : @[ControlDecode.scala 55:35]
      node _T_1 = eq(io.Fadd, UInt<1>("h01")) @[ControlDecode.scala 55:27]
      when _T_1 : @[ControlDecode.scala 55:35]
        io.FRegRead <= UInt<1>("h01") @[ControlDecode.scala 56:29]
        io.FRegWrite <= UInt<1>("h01") @[ControlDecode.scala 57:30]
        skip @[ControlDecode.scala 55:35]
      else : @[ControlDecode.scala 59:36]
        node _T_2 = eq(io.RType, UInt<1>("h01")) @[ControlDecode.scala 59:28]
        when _T_2 : @[ControlDecode.scala 59:36]
          io.RegWrite <= UInt<1>("h01") @[ControlDecode.scala 60:29]
          skip @[ControlDecode.scala 59:36]
        else : @[ControlDecode.scala 63:31]
          node _T_3 = eq(io.Load, UInt<1>("h01")) @[ControlDecode.scala 63:23]
          when _T_3 : @[ControlDecode.scala 63:31]
            io.MemRead <= UInt<1>("h01") @[ControlDecode.scala 64:28]
            io.RegWrite <= UInt<1>("h01") @[ControlDecode.scala 65:29]
            io.MemToReg <= UInt<1>("h01") @[ControlDecode.scala 66:29]
            io.AluOp <= UInt<3>("h04") @[ControlDecode.scala 67:26]
            io.Operand_bSel <= UInt<1>("h01") @[ControlDecode.scala 68:33]
            skip @[ControlDecode.scala 63:31]
          else : @[ControlDecode.scala 71:32]
            node _T_4 = eq(io.Store, UInt<1>("h01")) @[ControlDecode.scala 71:24]
            when _T_4 : @[ControlDecode.scala 71:32]
              io.MemWrite <= UInt<1>("h01") @[ControlDecode.scala 72:29]
              io.AluOp <= UInt<3>("h05") @[ControlDecode.scala 73:26]
              io.Operand_bSel <= UInt<1>("h01") @[ControlDecode.scala 74:33]
              io.ExtendSel <= UInt<2>("h02") @[ControlDecode.scala 75:30]
              skip @[ControlDecode.scala 71:32]
            else : @[ControlDecode.scala 78:33]
              node _T_5 = eq(io.SBType, UInt<1>("h01")) @[ControlDecode.scala 78:25]
              when _T_5 : @[ControlDecode.scala 78:33]
                io.Branch <= UInt<1>("h01") @[ControlDecode.scala 79:27]
                io.AluOp <= UInt<2>("h02") @[ControlDecode.scala 80:26]
                io.NextPcSel <= UInt<1>("h01") @[ControlDecode.scala 81:29]
                skip @[ControlDecode.scala 78:33]
              else : @[ControlDecode.scala 84:32]
                node _T_6 = eq(io.IType, UInt<1>("h01")) @[ControlDecode.scala 84:24]
                when _T_6 : @[ControlDecode.scala 84:32]
                  io.RegWrite <= UInt<1>("h01") @[ControlDecode.scala 85:29]
                  io.AluOp <= UInt<1>("h01") @[ControlDecode.scala 86:26]
                  io.Operand_bSel <= UInt<1>("h01") @[ControlDecode.scala 87:33]
                  skip @[ControlDecode.scala 84:32]
                else : @[ControlDecode.scala 90:31]
                  node _T_7 = eq(io.Jalr, UInt<1>("h01")) @[ControlDecode.scala 90:23]
                  when _T_7 : @[ControlDecode.scala 90:31]
                    io.RegWrite <= UInt<1>("h01") @[ControlDecode.scala 91:29]
                    io.AluOp <= UInt<2>("h03") @[ControlDecode.scala 92:26]
                    io.Operand_aSel <= UInt<2>("h02") @[ControlDecode.scala 93:33]
                    io.NextPcSel <= UInt<2>("h03") @[ControlDecode.scala 94:30]
                    skip @[ControlDecode.scala 90:31]
                  else : @[ControlDecode.scala 97:30]
                    node _T_8 = eq(io.Jal, UInt<1>("h01")) @[ControlDecode.scala 97:22]
                    when _T_8 : @[ControlDecode.scala 97:30]
                      io.RegWrite <= UInt<1>("h01") @[ControlDecode.scala 98:29]
                      io.AluOp <= UInt<2>("h03") @[ControlDecode.scala 99:26]
                      io.Operand_aSel <= UInt<2>("h02") @[ControlDecode.scala 100:33]
                      io.NextPcSel <= UInt<2>("h02") @[ControlDecode.scala 101:30]
                      skip @[ControlDecode.scala 97:30]
                    else : @[ControlDecode.scala 104:30]
                      node _T_9 = eq(io.Lui, UInt<1>("h01")) @[ControlDecode.scala 104:22]
                      when _T_9 : @[ControlDecode.scala 104:30]
                        io.RegWrite <= UInt<1>("h01") @[ControlDecode.scala 105:29]
                        io.AluOp <= UInt<3>("h06") @[ControlDecode.scala 106:26]
                        io.Operand_aSel <= UInt<2>("h03") @[ControlDecode.scala 107:33]
                        io.Operand_bSel <= UInt<1>("h01") @[ControlDecode.scala 108:33]
                        io.ExtendSel <= UInt<1>("h01") @[ControlDecode.scala 109:30]
                        skip @[ControlDecode.scala 104:30]
    
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opCode : UInt<7>, flip func5 : UInt<5>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemToReg : UInt<1>, AluOp : UInt<3>, Operand_aSel : UInt<2>, Operand_bSel : UInt<1>, ExtendSel : UInt<2>, NextPcSel : UInt<2>, FRegWrite : UInt<1>, FRegRead : UInt<1>}
    
    inst typeDec of TypeDecode @[Control.scala 28:29]
    typeDec.clock <= clock
    typeDec.reset <= reset
    inst controlDec of ControlDecode @[Control.scala 29:32]
    controlDec.clock <= clock
    controlDec.reset <= reset
    typeDec.io.opCode <= io.opCode @[Control.scala 31:27]
    typeDec.io.func5 <= io.func5 @[Control.scala 32:26]
    controlDec.io.RType <= typeDec.io.RType @[Control.scala 37:129]
    controlDec.io.Load <= typeDec.io.Load @[Control.scala 37:129]
    controlDec.io.Store <= typeDec.io.Store @[Control.scala 37:129]
    controlDec.io.SBType <= typeDec.io.Branch @[Control.scala 37:129]
    controlDec.io.IType <= typeDec.io.IType @[Control.scala 37:129]
    controlDec.io.Jalr <= typeDec.io.Jalr @[Control.scala 37:129]
    controlDec.io.Jal <= typeDec.io.Jal @[Control.scala 37:129]
    controlDec.io.Lui <= typeDec.io.Lui @[Control.scala 37:129]
    controlDec.io.Fmv <= typeDec.io.Fmv @[Control.scala 37:129]
    controlDec.io.Fadd <= typeDec.io.Fadd @[Control.scala 37:129]
    io.MemWrite <= controlDec.io.MemWrite @[Control.scala 43:130]
    io.Branch <= controlDec.io.Branch @[Control.scala 43:130]
    io.MemRead <= controlDec.io.MemRead @[Control.scala 43:130]
    io.RegWrite <= controlDec.io.RegWrite @[Control.scala 43:130]
    io.MemToReg <= controlDec.io.MemToReg @[Control.scala 43:130]
    io.AluOp <= controlDec.io.AluOp @[Control.scala 43:130]
    io.Operand_aSel <= controlDec.io.Operand_aSel @[Control.scala 43:130]
    io.Operand_bSel <= controlDec.io.Operand_bSel @[Control.scala 43:130]
    io.ExtendSel <= controlDec.io.ExtendSel @[Control.scala 43:130]
    io.NextPcSel <= controlDec.io.NextPcSel @[Control.scala 43:130]
    io.FRegWrite <= controlDec.io.FRegWrite @[Control.scala 43:130]
    io.FRegRead <= controlDec.io.FRegRead @[Control.scala 43:130]
    
  module DataMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip data_in : SInt<32>, data_out : SInt<32>, flip addr : UInt<32>, flip wr_en : UInt<1>, flip rd_en : UInt<1>}
    
    cmem memory : SInt<32>[1024] @[DataMemory.scala 23:21]
    io.data_out <= asSInt(UInt<1>("h00")) @[DataMemory.scala 26:17]
    when io.wr_en : @[DataMemory.scala 28:21]
      node _T = bits(io.addr, 9, 0)
      write mport MPORT = memory[_T], clock
      MPORT <= io.data_in
      skip @[DataMemory.scala 28:21]
    when io.rd_en : @[DataMemory.scala 34:21]
      node _io_data_out_T = bits(io.addr, 9, 0) @[DataMemory.scala 35:35]
      read mport io_data_out_MPORT = memory[_io_data_out_T], clock @[DataMemory.scala 35:35]
      io.data_out <= io_data_out_MPORT @[DataMemory.scala 35:21]
      skip @[DataMemory.scala 34:21]
    else : @[DataMemory.scala 38:16]
      io.data_out is invalid @[DataMemory.scala 39:21]
      skip @[DataMemory.scala 38:16]
    
  module ImmGen : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, flip pc : UInt<32>, s_imm : SInt<32>, sb_imm : SInt<32>, uj_imm : SInt<32>, u_imm : SInt<32>, i_imm : SInt<32>}
    
    node s_imm13_hi = bits(io.instr, 31, 25) @[ImmGen.scala 23:36]
    node s_imm13_lo = bits(io.instr, 11, 7) @[ImmGen.scala 23:52]
    node s_imm13 = cat(s_imm13_hi, s_imm13_lo) @[Cat.scala 30:58]
    node _io_s_imm_T = bits(s_imm13, 11, 11) @[ImmGen.scala 24:41]
    node _io_s_imm_T_1 = bits(_io_s_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_s_imm_hi = mux(_io_s_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _io_s_imm_T_2 = cat(io_s_imm_hi, s_imm13) @[Cat.scala 30:58]
    node _io_s_imm_T_3 = asSInt(_io_s_imm_T_2) @[ImmGen.scala 24:57]
    io.s_imm <= _io_s_imm_T_3 @[ImmGen.scala 24:18]
    node sb_imm13_hi_hi_hi = bits(io.instr, 31, 31) @[ImmGen.scala 27:37]
    node sb_imm13_hi_hi_lo = bits(io.instr, 7, 7) @[ImmGen.scala 27:50]
    node sb_imm13_hi_lo = bits(io.instr, 30, 25) @[ImmGen.scala 27:62]
    node sb_imm13_lo_hi = bits(io.instr, 11, 8) @[ImmGen.scala 27:78]
    node sb_imm13_lo = cat(sb_imm13_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node sb_imm13_hi_hi = cat(sb_imm13_hi_hi_hi, sb_imm13_hi_hi_lo) @[Cat.scala 30:58]
    node sb_imm13_hi = cat(sb_imm13_hi_hi, sb_imm13_hi_lo) @[Cat.scala 30:58]
    node sb_imm13 = cat(sb_imm13_hi, sb_imm13_lo) @[Cat.scala 30:58]
    node _io_sb_imm_T = bits(sb_imm13, 12, 12) @[ImmGen.scala 28:44]
    node _io_sb_imm_T_1 = bits(_io_sb_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_sb_imm_hi = mux(_io_sb_imm_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _io_sb_imm_T_2 = cat(io_sb_imm_hi, sb_imm13) @[Cat.scala 30:58]
    node _io_sb_imm_T_3 = add(_io_sb_imm_T_2, io.pc) @[ImmGen.scala 28:61]
    node _io_sb_imm_T_4 = tail(_io_sb_imm_T_3, 1) @[ImmGen.scala 28:61]
    node _io_sb_imm_T_5 = asSInt(_io_sb_imm_T_4) @[ImmGen.scala 28:70]
    io.sb_imm <= _io_sb_imm_T_5 @[ImmGen.scala 28:19]
    node uj_imm21_hi_hi_hi = bits(io.instr, 31, 31) @[ImmGen.scala 31:37]
    node uj_imm21_hi_hi_lo = bits(io.instr, 19, 12) @[ImmGen.scala 31:50]
    node uj_imm21_hi_lo = bits(io.instr, 20, 20) @[ImmGen.scala 31:66]
    node uj_imm21_lo_hi = bits(io.instr, 30, 21) @[ImmGen.scala 31:79]
    node uj_imm21_lo = cat(uj_imm21_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node uj_imm21_hi_hi = cat(uj_imm21_hi_hi_hi, uj_imm21_hi_hi_lo) @[Cat.scala 30:58]
    node uj_imm21_hi = cat(uj_imm21_hi_hi, uj_imm21_hi_lo) @[Cat.scala 30:58]
    node uj_imm21 = cat(uj_imm21_hi, uj_imm21_lo) @[Cat.scala 30:58]
    node _io_uj_imm_T = bits(uj_imm21, 20, 20) @[ImmGen.scala 32:44]
    node _io_uj_imm_T_1 = bits(_io_uj_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_uj_imm_hi = mux(_io_uj_imm_T_1, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _io_uj_imm_T_2 = cat(io_uj_imm_hi, uj_imm21) @[Cat.scala 30:58]
    node _io_uj_imm_T_3 = add(_io_uj_imm_T_2, io.pc) @[ImmGen.scala 32:61]
    node _io_uj_imm_T_4 = tail(_io_uj_imm_T_3, 1) @[ImmGen.scala 32:61]
    node _io_uj_imm_T_5 = asSInt(_io_uj_imm_T_4) @[ImmGen.scala 32:70]
    io.uj_imm <= _io_uj_imm_T_5 @[ImmGen.scala 32:19]
    node _io_u_imm_T = bits(io.instr, 31, 31) @[ImmGen.scala 35:43]
    node _io_u_imm_T_1 = bits(_io_u_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_u_imm_hi = mux(_io_u_imm_T_1, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node io_u_imm_lo = bits(io.instr, 31, 12) @[ImmGen.scala 35:57]
    node _io_u_imm_T_2 = cat(io_u_imm_hi, io_u_imm_lo) @[Cat.scala 30:58]
    node _io_u_imm_T_3 = shl(_io_u_imm_T_2, 12) @[ImmGen.scala 35:67]
    node _io_u_imm_T_4 = asSInt(_io_u_imm_T_3) @[ImmGen.scala 35:74]
    io.u_imm <= _io_u_imm_T_4 @[ImmGen.scala 35:18]
    node _io_i_imm_T = bits(io.instr, 31, 31) @[ImmGen.scala 38:42]
    node _io_i_imm_T_1 = bits(_io_i_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_i_imm_hi = mux(_io_i_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_i_imm_lo = bits(io.instr, 31, 20) @[ImmGen.scala 38:56]
    node _io_i_imm_T_2 = cat(io_i_imm_hi, io_i_imm_lo) @[Cat.scala 30:58]
    node _io_i_imm_T_3 = asSInt(_io_i_imm_T_2) @[ImmGen.scala 38:66]
    io.i_imm <= _io_i_imm_T_3 @[ImmGen.scala 38:18]
    
  module InstructionMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<10>, inst : UInt<32>}
    
    cmem imem : UInt<32>[1024] @[InstructionMemory.scala 15:19]
    infer mport io_inst_MPORT = imem[io.addr], clock @[InstructionMemory.scala 16:20]
    io.inst <= io_inst_MPORT @[InstructionMemory.scala 16:13]
    
  module Jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : SInt<32>, flip Type : SInt<32>, out : SInt<32>}
    
    node _io_out_T = add(io.rs1, io.Type) @[Jalr.scala 17:24]
    node _io_out_T_1 = tail(_io_out_T, 1) @[Jalr.scala 17:24]
    node _io_out_T_2 = asSInt(_io_out_T_1) @[Jalr.scala 17:24]
    node _io_out_T_3 = and(_io_out_T_2, asSInt(UInt<33>("h0fffffffe"))) @[Jalr.scala 17:35]
    node _io_out_T_4 = asSInt(_io_out_T_3) @[Jalr.scala 17:35]
    io.out <= _io_out_T_4 @[Jalr.scala 17:12]
    
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<32>, pc : UInt<32>, pcPlus4 : UInt<32>}
    
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ProgramCounter.scala 17:22]
    reg <= io.in @[ProgramCounter.scala 18:9]
    io.pc <= reg @[ProgramCounter.scala 19:11]
    node _io_pcPlus4_T = add(reg, UInt<3>("h04")) @[ProgramCounter.scala 20:23]
    node _io_pcPlus4_T_1 = tail(_io_pcPlus4_T, 1) @[ProgramCounter.scala 20:23]
    io.pcPlus4 <= _io_pcPlus4_T_1 @[ProgramCounter.scala 20:16]
    
  module RegFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip raddr1 : UInt<5>, flip raddr2 : UInt<5>, rdata1 : SInt<32>, rdata2 : SInt<32>, flip regEn : UInt<1>, flip waddr : UInt<5>, flip wdata : SInt<32>}
    
    reg regs : SInt<32>[32], clock @[RegisterFile.scala 27:19]
    regs[0] <= asSInt(UInt<1>("h00")) @[RegisterFile.scala 28:13]
    node _io_rdata1_T = orr(io.raddr1) @[RegisterFile.scala 29:33]
    node _io_rdata1_T_1 = mux(_io_rdata1_T, regs[io.raddr1], asSInt(UInt<1>("h00"))) @[RegisterFile.scala 29:21]
    io.rdata1 <= _io_rdata1_T_1 @[RegisterFile.scala 29:15]
    node _io_rdata2_T = orr(io.raddr2) @[RegisterFile.scala 30:33]
    node _io_rdata2_T_1 = mux(_io_rdata2_T, regs[io.raddr2], asSInt(UInt<1>("h00"))) @[RegisterFile.scala 30:21]
    io.rdata2 <= _io_rdata2_T_1 @[RegisterFile.scala 30:15]
    node _T = orr(io.waddr) @[RegisterFile.scala 32:31]
    node _T_1 = and(io.regEn, _T) @[RegisterFile.scala 32:20]
    when _T_1 : @[RegisterFile.scala 32:36]
      regs[io.waddr] <= io.wdata @[RegisterFile.scala 34:25]
      skip @[RegisterFile.scala 32:36]
    
  module FRegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip raddr1 : UInt<5>, flip raddr2 : UInt<5>, rdata1 : SInt<32>, rdata2 : SInt<32>, flip raddr3 : UInt<5>, rdata3 : SInt<32>, flip regEn : UInt<1>, flip waddr : UInt<5>, flip wdata : SInt<32>}
    
    reg regs : SInt<32>[32], clock @[FRegisterFile.scala 24:19]
    node _io_rdata1_T = orr(io.raddr1) @[FRegisterFile.scala 28:33]
    node _io_rdata1_T_1 = mux(_io_rdata1_T, regs[io.raddr1], asSInt(UInt<1>("h00"))) @[FRegisterFile.scala 28:21]
    io.rdata1 <= _io_rdata1_T_1 @[FRegisterFile.scala 28:15]
    node _io_rdata2_T = orr(io.raddr2) @[FRegisterFile.scala 29:33]
    node _io_rdata2_T_1 = mux(_io_rdata2_T, regs[io.raddr2], asSInt(UInt<1>("h00"))) @[FRegisterFile.scala 29:21]
    io.rdata2 <= _io_rdata2_T_1 @[FRegisterFile.scala 29:15]
    node _io_rdata3_T = orr(io.raddr3) @[FRegisterFile.scala 30:33]
    node _io_rdata3_T_1 = mux(_io_rdata3_T, regs[io.raddr3], asSInt(UInt<1>("h00"))) @[FRegisterFile.scala 30:21]
    io.rdata3 <= _io_rdata3_T_1 @[FRegisterFile.scala 30:15]
    node _T = orr(io.waddr) @[FRegisterFile.scala 32:31]
    node _T_1 = and(io.regEn, _T) @[FRegisterFile.scala 32:20]
    when _T_1 : @[FRegisterFile.scala 32:36]
      regs[io.waddr] <= io.wdata @[FRegisterFile.scala 34:25]
      skip @[FRegisterFile.scala 32:36]
    
  module TopFile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {RegOut : SInt<32>}
    
    inst alu of Alu @[TopFile.scala 14:25]
    alu.clock <= clock
    alu.reset <= reset
    inst aluControl of AluControl @[TopFile.scala 15:28]
    aluControl.clock <= clock
    aluControl.reset <= reset
    inst control of Control @[TopFile.scala 16:29]
    control.clock <= clock
    control.reset <= reset
    inst dataMemory of DataMem @[TopFile.scala 17:32]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst ImmediateGeneration of ImmGen @[TopFile.scala 18:41]
    ImmediateGeneration.clock <= clock
    ImmediateGeneration.reset <= reset
    inst Memory of InstructionMemory @[TopFile.scala 19:28]
    Memory.clock <= clock
    Memory.reset <= reset
    inst jalr of Jalr @[TopFile.scala 20:26]
    jalr.clock <= clock
    jalr.reset <= reset
    inst pc of PC @[TopFile.scala 21:24]
    pc.clock <= clock
    pc.reset <= reset
    inst registerFile of RegFile @[TopFile.scala 22:34]
    registerFile.clock <= clock
    registerFile.reset <= reset
    inst freg of FRegisterFile @[TopFile.scala 24:22]
    freg.clock <= clock
    freg.reset <= reset
    node _Memory_io_addr_T = bits(pc.io.pc, 11, 2) @[TopFile.scala 30:35]
    Memory.io.addr <= _Memory_io_addr_T @[TopFile.scala 30:24]
    pc.io.in <= pc.io.pcPlus4 @[TopFile.scala 31:18]
    node _control_io_opCode_T = bits(Memory.io.inst, 6, 0) @[TopFile.scala 35:40]
    control.io.opCode <= _control_io_opCode_T @[TopFile.scala 35:23]
    node _control_io_func5_T = bits(Memory.io.inst, 31, 27) @[TopFile.scala 36:39]
    control.io.func5 <= _control_io_func5_T @[TopFile.scala 36:22]
    ImmediateGeneration.io.instr <= Memory.io.inst @[TopFile.scala 37:38]
    ImmediateGeneration.io.pc <= pc.io.pc @[TopFile.scala 38:35]
    registerFile.io.regEn <= control.io.RegWrite @[TopFile.scala 42:27]
    node _registerFile_io_raddr1_T = bits(Memory.io.inst, 19, 15) @[TopFile.scala 43:49]
    registerFile.io.raddr1 <= _registerFile_io_raddr1_T @[TopFile.scala 43:32]
    node _registerFile_io_raddr2_T = bits(Memory.io.inst, 24, 20) @[TopFile.scala 44:49]
    registerFile.io.raddr2 <= _registerFile_io_raddr2_T @[TopFile.scala 44:32]
    node _registerFile_io_waddr_T = bits(Memory.io.inst, 11, 7) @[TopFile.scala 45:48]
    registerFile.io.waddr <= _registerFile_io_waddr_T @[TopFile.scala 45:31]
    freg.io.regEn <= control.io.FRegWrite @[TopFile.scala 49:19]
    node _freg_io_raddr1_T = bits(Memory.io.inst, 19, 15) @[TopFile.scala 50:37]
    freg.io.raddr1 <= _freg_io_raddr1_T @[TopFile.scala 50:20]
    node _freg_io_raddr2_T = bits(Memory.io.inst, 24, 20) @[TopFile.scala 51:41]
    freg.io.raddr2 <= _freg_io_raddr2_T @[TopFile.scala 51:24]
    node _freg_io_raddr3_T = bits(Memory.io.inst, 31, 27) @[TopFile.scala 52:37]
    freg.io.raddr3 <= _freg_io_raddr3_T @[TopFile.scala 52:20]
    node _freg_io_waddr_T = bits(Memory.io.inst, 11, 7) @[TopFile.scala 53:40]
    freg.io.waddr <= _freg_io_waddr_T @[TopFile.scala 53:23]
    aluControl.io.Aluop <= control.io.AluOp @[TopFile.scala 57:25]
    node _aluControl_io_func3_T = bits(Memory.io.inst, 14, 12) @[TopFile.scala 58:46]
    aluControl.io.func3 <= _aluControl_io_func3_T @[TopFile.scala 58:29]
    node _aluControl_io_func7_T = bits(Memory.io.inst, 30, 30) @[TopFile.scala 59:46]
    aluControl.io.func7 <= _aluControl_io_func7_T @[TopFile.scala 59:29]
    jalr.io.rs1 <= registerFile.io.rdata1 @[TopFile.scala 63:17]
    jalr.io.Type <= ImmediateGeneration.io.i_imm @[TopFile.scala 64:18]
    when control.io.FRegWrite : @[TopFile.scala 66:31]
      alu.io.in2 <= freg.io.rdata2 @[TopFile.scala 67:20]
      skip @[TopFile.scala 66:31]
    else : @[TopFile.scala 69:87]
      node _T = eq(control.io.ExtendSel, UInt<1>("h00")) @[TopFile.scala 69:37]
      node _T_1 = eq(control.io.Operand_bSel, UInt<1>("h01")) @[TopFile.scala 69:76]
      node _T_2 = and(_T, _T_1) @[TopFile.scala 69:49]
      when _T_2 : @[TopFile.scala 69:87]
        alu.io.in2 <= ImmediateGeneration.io.i_imm @[TopFile.scala 70:20]
        skip @[TopFile.scala 69:87]
      else : @[TopFile.scala 73:91]
        node _T_3 = eq(control.io.ExtendSel, UInt<1>("h01")) @[TopFile.scala 73:41]
        node _T_4 = eq(control.io.Operand_bSel, UInt<1>("h01")) @[TopFile.scala 73:80]
        node _T_5 = and(_T_3, _T_4) @[TopFile.scala 73:53]
        when _T_5 : @[TopFile.scala 73:91]
          alu.io.in2 <= ImmediateGeneration.io.u_imm @[TopFile.scala 74:20]
          skip @[TopFile.scala 73:91]
        else : @[TopFile.scala 77:91]
          node _T_6 = eq(control.io.ExtendSel, UInt<2>("h02")) @[TopFile.scala 77:41]
          node _T_7 = eq(control.io.Operand_bSel, UInt<1>("h01")) @[TopFile.scala 77:80]
          node _T_8 = and(_T_6, _T_7) @[TopFile.scala 77:53]
          when _T_8 : @[TopFile.scala 77:91]
            alu.io.in2 <= ImmediateGeneration.io.s_imm @[TopFile.scala 78:28]
            skip @[TopFile.scala 77:91]
          else : @[TopFile.scala 80:20]
            alu.io.in2 <= registerFile.io.rdata2 @[TopFile.scala 80:32]
            skip @[TopFile.scala 80:20]
    alu.io.AluControl <= aluControl.io.control @[TopFile.scala 82:27]
    registerFile.io.wdata <= alu.io.out @[TopFile.scala 83:31]
    io.RegOut <= registerFile.io.wdata @[TopFile.scala 84:19]
    node _pc_io_in_T = eq(control.io.NextPcSel, UInt<1>("h01")) @[TopFile.scala 88:31]
    node _pc_io_in_T_1 = eq(control.io.Branch, UInt<1>("h00")) @[TopFile.scala 88:64]
    node _pc_io_in_T_2 = and(_pc_io_in_T, _pc_io_in_T_1) @[TopFile.scala 88:43]
    node _pc_io_in_T_3 = eq(alu.io.Branch, UInt<1>("h00")) @[TopFile.scala 88:92]
    node _pc_io_in_T_4 = and(_pc_io_in_T_2, _pc_io_in_T_3) @[TopFile.scala 88:75]
    node _pc_io_in_T_5 = eq(control.io.NextPcSel, UInt<1>("h01")) @[TopFile.scala 89:31]
    node _pc_io_in_T_6 = eq(control.io.Branch, UInt<1>("h01")) @[TopFile.scala 89:64]
    node _pc_io_in_T_7 = and(_pc_io_in_T_5, _pc_io_in_T_6) @[TopFile.scala 89:43]
    node _pc_io_in_T_8 = eq(alu.io.Branch, UInt<1>("h00")) @[TopFile.scala 89:92]
    node _pc_io_in_T_9 = and(_pc_io_in_T_7, _pc_io_in_T_8) @[TopFile.scala 89:75]
    node _pc_io_in_T_10 = eq(control.io.NextPcSel, UInt<1>("h01")) @[TopFile.scala 90:35]
    node _pc_io_in_T_11 = eq(control.io.Branch, UInt<1>("h00")) @[TopFile.scala 90:68]
    node _pc_io_in_T_12 = and(_pc_io_in_T_10, _pc_io_in_T_11) @[TopFile.scala 90:47]
    node _pc_io_in_T_13 = eq(alu.io.Branch, UInt<1>("h01")) @[TopFile.scala 90:96]
    node _pc_io_in_T_14 = and(_pc_io_in_T_12, _pc_io_in_T_13) @[TopFile.scala 90:79]
    node _pc_io_in_T_15 = eq(control.io.NextPcSel, UInt<1>("h01")) @[TopFile.scala 91:35]
    node _pc_io_in_T_16 = eq(control.io.Branch, UInt<1>("h01")) @[TopFile.scala 91:68]
    node _pc_io_in_T_17 = and(_pc_io_in_T_15, _pc_io_in_T_16) @[TopFile.scala 91:47]
    node _pc_io_in_T_18 = eq(alu.io.Branch, UInt<1>("h01")) @[TopFile.scala 91:96]
    node _pc_io_in_T_19 = and(_pc_io_in_T_17, _pc_io_in_T_18) @[TopFile.scala 91:79]
    node _pc_io_in_T_20 = asUInt(ImmediateGeneration.io.sb_imm) @[TopFile.scala 91:141]
    node _pc_io_in_T_21 = eq(control.io.NextPcSel, UInt<1>("h00")) @[TopFile.scala 92:31]
    node _pc_io_in_T_22 = eq(control.io.NextPcSel, UInt<2>("h02")) @[TopFile.scala 93:31]
    node _pc_io_in_T_23 = asUInt(ImmediateGeneration.io.uj_imm) @[TopFile.scala 93:77]
    node _pc_io_in_T_24 = eq(control.io.NextPcSel, UInt<2>("h03")) @[TopFile.scala 94:31]
    node _pc_io_in_T_25 = asUInt(jalr.io.out) @[TopFile.scala 94:59]
    node _pc_io_in_T_26 = mux(_pc_io_in_T_24, _pc_io_in_T_25, UInt<1>("h00")) @[Mux.scala 98:16]
    node _pc_io_in_T_27 = mux(_pc_io_in_T_22, _pc_io_in_T_23, _pc_io_in_T_26) @[Mux.scala 98:16]
    node _pc_io_in_T_28 = mux(_pc_io_in_T_21, pc.io.pcPlus4, _pc_io_in_T_27) @[Mux.scala 98:16]
    node _pc_io_in_T_29 = mux(_pc_io_in_T_19, _pc_io_in_T_20, _pc_io_in_T_28) @[Mux.scala 98:16]
    node _pc_io_in_T_30 = mux(_pc_io_in_T_14, pc.io.pcPlus4, _pc_io_in_T_29) @[Mux.scala 98:16]
    node _pc_io_in_T_31 = mux(_pc_io_in_T_9, pc.io.pcPlus4, _pc_io_in_T_30) @[Mux.scala 98:16]
    node _pc_io_in_T_32 = mux(_pc_io_in_T_4, pc.io.pcPlus4, _pc_io_in_T_31) @[Mux.scala 98:16]
    pc.io.in <= _pc_io_in_T_32 @[TopFile.scala 86:14]
    node _T_9 = eq(control.io.FRegWrite, UInt<1>("h01")) @[TopFile.scala 104:31]
    when _T_9 : @[TopFile.scala 104:42]
      freg.io.wdata <= alu.io.out @[TopFile.scala 105:23]
      skip @[TopFile.scala 104:42]
    else : @[TopFile.scala 106:16]
      freg.io.wdata <= asSInt(UInt<1>("h00")) @[TopFile.scala 107:23]
      skip @[TopFile.scala 106:16]
    node _dataMemory_io_addr_T = bits(alu.io.out, 9, 2) @[TopFile.scala 113:38]
    dataMemory.io.addr <= _dataMemory_io_addr_T @[TopFile.scala 113:24]
    dataMemory.io.data_in <= registerFile.io.rdata2 @[TopFile.scala 114:31]
    dataMemory.io.wr_en <= control.io.MemWrite @[TopFile.scala 115:29]
    dataMemory.io.rd_en <= control.io.MemRead @[TopFile.scala 116:29]
    node _T_10 = eq(control.io.MemToReg, UInt<1>("h01")) @[TopFile.scala 118:31]
    when _T_10 : @[TopFile.scala 118:40]
      registerFile.io.wdata <= dataMemory.io.data_out @[TopFile.scala 119:31]
      skip @[TopFile.scala 118:40]
    else : @[TopFile.scala 122:20]
      registerFile.io.wdata <= alu.io.out @[TopFile.scala 123:31]
      skip @[TopFile.scala 122:20]
    node _T_11 = eq(control.io.Operand_aSel, UInt<1>("h00")) @[TopFile.scala 127:35]
    node _T_12 = eq(control.io.Operand_aSel, UInt<2>("h03")) @[TopFile.scala 127:74]
    node _T_13 = or(_T_11, _T_12) @[TopFile.scala 127:47]
    when _T_13 : @[TopFile.scala 127:88]
      node _alu_io_in1_T = mux(control.io.FRegRead, freg.io.rdata1, registerFile.io.rdata1) @[TopFile.scala 129:26]
      alu.io.in1 <= _alu_io_in1_T @[TopFile.scala 129:20]
      skip @[TopFile.scala 127:88]
    else : @[TopFile.scala 132:57]
      node _T_14 = eq(control.io.Operand_aSel, UInt<2>("h02")) @[TopFile.scala 132:44]
      when _T_14 : @[TopFile.scala 132:57]
        node _alu_io_in1_T_1 = asSInt(pc.io.pcPlus4) @[TopFile.scala 134:62]
        node _alu_io_in1_T_2 = mux(control.io.FRegRead, _alu_io_in1_T_1, freg.io.rdata1) @[TopFile.scala 134:26]
        alu.io.in1 <= _alu_io_in1_T_2 @[TopFile.scala 134:20]
        skip @[TopFile.scala 132:57]
      else : @[TopFile.scala 137:20]
        alu.io.in1 is invalid @[TopFile.scala 137:32]
        skip @[TopFile.scala 137:20]
    
